// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: Proto.proto at 26:1
package com.bean_keeper;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import java.io.IOException;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

public final class AccountDelta extends Message<AccountDelta, AccountDelta.Builder> {
  public static final ProtoAdapter<AccountDelta> ADAPTER = new ProtoAdapter<AccountDelta>(FieldEncoding.LENGTH_DELIMITED, AccountDelta.class) {
    @Override
    public int encodedSize(AccountDelta value) {
      return Transaction.ADAPTER.asRepeated().encodedSizeWithTag(1, value.addedOrModified)
          + (value.serverTimestamp != null ? ProtoAdapter.INT64.encodedSizeWithTag(2, value.serverTimestamp) : 0)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, AccountDelta value) throws IOException {
      if (value.addedOrModified != null) Transaction.ADAPTER.asRepeated().encodeWithTag(writer, 1, value.addedOrModified);
      if (value.serverTimestamp != null) ProtoAdapter.INT64.encodeWithTag(writer, 2, value.serverTimestamp);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public AccountDelta decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.addedOrModified.add(Transaction.ADAPTER.decode(reader)); break;
          case 2: builder.serverTimestamp(ProtoAdapter.INT64.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public AccountDelta redact(AccountDelta value) {
      Builder builder = value.newBuilder();
      redactElements(builder.addedOrModified, Transaction.ADAPTER);
      builder.clearUnknownFields();
      return builder.build();
    }
  };

  private static final long serialVersionUID = 0L;

  public static final Long DEFAULT_SERVERTIMESTAMP = 0L;

  /**
   * Added or modified transactions
   */
  public final List<Transaction> addedOrModified;

  /**
   * When sending to the server: The timestamp of the last successful sync with the server.
   * When received from the server: The current server timestamp to be stored as the
   * timestamp of the last successful sync with the server.
   * The timestamp is defined as the number of milliseconds since 1970.
   */
  public final Long serverTimestamp;

  public AccountDelta(List<Transaction> addedOrModified, Long serverTimestamp) {
    this(addedOrModified, serverTimestamp, ByteString.EMPTY);
  }

  public AccountDelta(List<Transaction> addedOrModified, Long serverTimestamp, ByteString unknownFields) {
    super(unknownFields);
    this.addedOrModified = immutableCopyOf("addedOrModified", addedOrModified);
    this.serverTimestamp = serverTimestamp;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.addedOrModified = copyOf("addedOrModified", addedOrModified);
    builder.serverTimestamp = serverTimestamp;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof AccountDelta)) return false;
    AccountDelta o = (AccountDelta) other;
    return equals(unknownFields(), o.unknownFields())
        && equals(addedOrModified, o.addedOrModified)
        && equals(serverTimestamp, o.serverTimestamp);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (addedOrModified != null ? addedOrModified.hashCode() : 1);
      result = result * 37 + (serverTimestamp != null ? serverTimestamp.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (addedOrModified != null) builder.append(", addedOrModified=").append(addedOrModified);
    if (serverTimestamp != null) builder.append(", serverTimestamp=").append(serverTimestamp);
    return builder.replace(0, 2, "AccountDelta{").append('}').toString();
  }

  public static final class Builder extends com.squareup.wire.Message.Builder<AccountDelta, Builder> {
    public List<Transaction> addedOrModified;

    public Long serverTimestamp;

    public Builder() {
      addedOrModified = newMutableList();
    }

    /**
     * Added or modified transactions
     */
    public Builder addedOrModified(List<Transaction> addedOrModified) {
      checkElementsNotNull(addedOrModified);
      this.addedOrModified = addedOrModified;
      return this;
    }

    /**
     * When sending to the server: The timestamp of the last successful sync with the server.
     * When received from the server: The current server timestamp to be stored as the
     * timestamp of the last successful sync with the server.
     * The timestamp is defined as the number of milliseconds since 1970.
     */
    public Builder serverTimestamp(Long serverTimestamp) {
      this.serverTimestamp = serverTimestamp;
      return this;
    }

    @Override
    public AccountDelta build() {
      return new AccountDelta(addedOrModified, serverTimestamp, buildUnknownFields());
    }
  }
}
